{"version":3,"sources":["RecipeAllContext.js","titleForm.js","IngredientForm.js","directionsForm.js","wholeCard.js","App.js","serviceWorker.js","index.js"],"names":["RecipeContext","createContext","RecipeContextProvider","props","useState","localData","localStorage","getItem","JSON","parse","recipes","setRecipes","useEffect","setItem","stringify","Provider","value","addCard","title","ingredients","directions","id","uuidv4","addTitle","cardId","tempRecipes","map","rec","addIng","item","amount","ing","idIng","removeIng","tempIng","filter","removeDir","tempDir","dir","idDir","addDir","removeRecipe","children","TitleForm","useContext","setTitle","onSubmit","e","preventDefault","recId","className","type","placeholder","onChange","target","IngredientForm","setAmount","DirectionsForm","setDir","WholeCard","key","i","onClick","color","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ce5433ea.chunk.js","sourcesContent":["import React, {useState, createContext, useEffect} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nexport const RecipeContext = createContext();\n\nconst RecipeContextProvider = (props) => {\n//All recipes state\n    const [recipes, setRecipes]=useState(()=>{\n        const localData = localStorage.getItem('recipes');\n        return localData? JSON.parse(localData):[];\n        });\n\n//add card\n    const addCard = () =>{setRecipes(\n        [...recipes, {title:'', ingredients:[], directions:[], id:uuidv4()}]\n        )}\n\n//add title\n    const addTitle=(cardId, title)=>{\n        let tempRecipes = [...recipes].map(rec=>{\n            if(rec.id===cardId)\n            return({title: title, ingredients: [...rec.ingredients], directions:[...rec.directions], id:rec.id})\n            else\n            return({...rec})\n        });\n        setRecipes(tempRecipes);\n    }\n        \n//add ingredient to state\n    const addIng = (cardId, item, amount) =>{\n        let tempRecipes = [...recipes].map(rec=>{\n            if(rec.id===cardId)\n                return({title: rec.title, ingredients: [...rec.ingredients,{ing:item,amount:amount,idIng:uuidv4()}], directions:[...rec.directions], id:rec.id})\n            else \n                return ({...rec});\n            });\n        setRecipes(tempRecipes);\n    }\n\n//remove an ingredient from state\n    const removeIng = (id) =>{\n        let tempIng; //filter out the ingredient to be removed\n        let tempRecipes = [...recipes].map(rec=>{\n            tempIng = rec.ingredients.filter(ing=>ing.idIng!==id);\n            return({title: rec.title, ingredients: tempIng, directions:[...rec.directions], id:rec.id})\n            });\n            setRecipes(tempRecipes);\n    }\n\n//add direction to state\n    const addDir = (cardId, dir) =>{\n        let tempRecipes = [...recipes].map(rec=>{\n            if(rec.id===cardId)\n                return({title: rec.title, ingredients: [...rec.ingredients], directions:[...rec.directions,{dir:dir,idDir:uuidv4()}], id:rec.id})\n            else \n                return ({...rec});\n            });\n        setRecipes(tempRecipes);\n    }\n\n//remove a direction from state\n    const removeDir = (id) =>{\n        let tempDir;//filter out the direction to be removed\n        let tempRecipes = [...recipes].map(rec=>{\n            tempDir = rec.directions.filter(dir=>dir.idDir!==id);\n            return({title: rec.title, ingredients: [...rec.ingredients], directions:tempDir, id:rec.id})\n            });\n            setRecipes(tempRecipes);\n    }\n\n//remove a recipe card from state\n    const removeRecipe = (id) => {\n        setRecipes(recipes.filter(rec=>rec.id!==id));\n    }\n\n\n//add to local storage\n    useEffect(()=>{\n        localStorage.setItem('recipes', JSON.stringify(recipes))\n    },[recipes]);\n\n    return ( \n        <RecipeContext.Provider value={{addCard, recipes,addTitle, addIng, removeIng, removeDir, addDir, removeRecipe}}>\n            {props.children}\n        </RecipeContext.Provider>\n     );\n}\n \nexport default RecipeContextProvider;","import React, {useContext, useState} from 'react';\nimport { RecipeContext } from './RecipeAllContext';\n\nconst TitleForm = (props)=>{\n\nconst {addTitle} = useContext(RecipeContext);\n\nconst[title, setTitle]=useState('');\n\nconst handleSubmitTitle=(e)=>{\n    e.preventDefault();\n    addTitle(props.recId, title);\n    setTitle('')\n}\n\nreturn (\n        <form onSubmit={handleSubmitTitle}>   \n            <div className=\"form\">\n            <input type=\"text\" placeholder=\"Title\" value={title}\n            onChange={e=>setTitle(e.target.value)} />\n            <input type=\"submit\" value=\"+\"/>\n            </div>\n        </form> \n        )\n}\n\nexport default TitleForm","import React, {useContext, useState} from 'react';\nimport { RecipeContext } from './RecipeAllContext';\n\nconst IngredientForm = (props)=>{\n\nconst {addIng} = useContext(RecipeContext);\n\nconst[item, setItem]=useState('');\nconst[amount, setAmount]=useState('');\n\n\nconst handleSubmitIng = (e)=>{\n    e.preventDefault();\n    addIng(props.recId, item, amount);\n    setItem('');\n    setAmount('');\n}\n\nreturn (\n        <form onSubmit={handleSubmitIng}>   \n            <div className=\"form\">\n            <input type=\"text\" placeholder=\"Ingredient\" value={item} \n            onChange={e=>setItem(e.target.value)}/> :\n            <input type=\"text\" placeholder=\"Amount\" value={amount}\n            onChange={e=>setAmount(e.target.value)} />\n            <input type=\"submit\" value=\"+\"/>\n            </div>\n        </form> \n        )\n}\n\nexport default IngredientForm","import React, {useContext, useState} from 'react';\nimport { RecipeContext } from './RecipeAllContext';\n\nconst DirectionsForm = (props)=>{\n\nconst {addDir} = useContext(RecipeContext);\n\nconst[dir, setDir]=useState('')\n\nconst handleSubmitDir = (e)=>{\n    e.preventDefault();\n    addDir(props.recId, dir);\n    setDir('');\n}\n\nreturn (\n        <form onSubmit={handleSubmitDir}>   \n            <div className=\"form\">\n            <input  type=\"text\" placeholder=\"Direction\" value={dir} \n            onChange={e=>setDir(e.target.value)}/>\n            <input type=\"submit\" value=\"+\"/>\n            </div>\n        </form> \n        )\n}\n\nexport default DirectionsForm","import React, {useContext} from 'react';\nimport { RecipeContext } from './RecipeAllContext';\nimport TitleForm from './titleForm';\nimport IngredientForm from './IngredientForm'\nimport DirectionsForm from './directionsForm';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\n\n\nconst WholeCard = () => {\n    //use context functions\n    const {addCard, recipes, removeIng, removeDir, removeRecipe} = useContext(RecipeContext);\n\n    return ( \n        <div className=\"cardContainer\">\n            {/*Card*/}\n             {recipes.map(rec=>\n                <div className=\"card\" key={rec.id}>\n\n                {/*Title*/}\n                <h3 className=\"cardTitle\">{rec.title}</h3>\n                <TitleForm recId={rec.id}/>\n\n                {/*Ingredients*/}\n                <h4 className=\"ingTitle\">Ingredients</h4>\n                <ul className=\"ingredientsList\">\n                    {rec.ingredients.map(i=>\n                        <li key={i.idIng} \n                        onClick={()=>{removeIng(i.idIng)}}\n                        className=\"ingItem\">\n                        {i.ing} : {i.amount}\n                        </li>)}\n                </ul>\n                <IngredientForm recId={rec.id}/>\n\n                {/*Directions*/}\n                <h4 className=\"dirTitle\">Directions</h4>\n                <ul className=\"directionsList\">\n                    {rec.directions.map(i=>\n                        <li key={i.idDir} \n                        onClick={()=>{removeDir(i.idDir)}}\n                        className=\"dirItem\">\n                        {i.dir}\n                        </li>)}\n                </ul>\n                <DirectionsForm recId={rec.id}/>\n\n                {/*Remove Entire Recipe*/}\n                <DeleteOutlinedIcon color=\"secondary\" onClick={()=>{removeRecipe(rec.id)}} className=\"deleteCard\"/>                \n            </div>\n             )}\n\n             {/*Add Recipe Card*/}\n            <button className=\"addCard\" onClick={addCard}>+</button>\n        </div>\n     );\n}\n \nexport default WholeCard;","import React from 'react';\nimport RecipeContextProvider from './RecipeAllContext';\nimport WholeCard from './wholeCard';\nimport \"./App.css\"\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n          <h1 className=\"headerTitle\">My Recipes</h1>\n      </div>\n      <RecipeContextProvider>\n      <WholeCard/>\n      </RecipeContextProvider>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}